//
//  SearchViewController.swift
//  MoviesApp
//
//  Created by Sergey Stelmakh on 14.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Протокол отображения SearchViewController-а
protocol SearchDisplayLogic: AnyObject {
  
}

/// Экран поиска фильмов
final class SearchViewController: UIViewController {
    
    // MARK: - Константные текстовки
    private let titleVC = "Поиск 🔎"
    
    // MARK: - UI
    
    /// Контроллер для поиска
    private let searchController = UISearchController(searchResultsController: nil)
    
    /// таблица для отображения коллекций
    private let tableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.showsVerticalScrollIndicator = false
        tableView.register(SearchCell.self, forCellReuseIdentifier: String(describing: SearchCell.self))
        return tableView
    }()
    
    // MARK: - Params
    
    /// фильмы
    var films = [String]()
  
    /// Ссылка на слой презентации
    var presenter: SearchViewControllerOutput?
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        setupConstraints()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
    }
}

// MARK: - Setup
private extension SearchViewController {
    func setup() {
        view.backgroundColor = .white
        setupNavigationBar()
        
        // SearchController
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.delegate = self
        navigationItem.searchController = searchController
        definesPresentationContext = true
        
        // tableView
        view.addSubview(tableView)
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    func setupNavigationBar() {
        title = titleVC
        navigationController?.navigationBar.prefersLargeTitles = true
        self.navigationController?.navigationBar.tintColor = UIColor.black
        let filterBarButton = UIBarButtonItem(image: UIImage(named: "settings"), style: .plain, target: self, action: #selector(showFilter))
        
        navigationItem.rightBarButtonItem = filterBarButton
    }
    
    @objc func showFilter() {
        presenter?.presentSettingsScreen(view: self)
    }
}

// MARK: - Setup constraints
private extension SearchViewController {
    func setupConstraints() {
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
}

// MARK: - UITableViewDataSource
extension SearchViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        if films.count == 0 {
            tableView.setEmptyView(title: "У вас нет задач 🤷‍♂️", message: "Введите название фильма в поиск")
        }
        else {
            tableView.restore()
        }
        
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: SearchCell.self), for: indexPath) as? SearchCell else { return UITableViewCell() }
        
        
        return cell
    }
}

// MARK: - UITableViewDelegate
extension SearchViewController: UITableViewDelegate {
    
}

// MARK: - UISearchBarDelegate
extension SearchViewController: UISearchBarDelegate {
    
}

// MARK: - SearchDisplayLogic
extension SearchViewController: SearchDisplayLogic {
    
}
