//
//  SearchViewController.swift
//  MoviesApp
//
//  Created by Sergey Stelmakh on 14.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è SearchViewController-–∞
protocol SearchDisplayLogic: AnyObject {
    /// –≤—å—é –º–æ–¥–µ–ª—å
    var searchResults: [SearchMovie] { get set }
}

/// –≠–∫—Ä–∞–Ω –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
final class SearchViewController: UIViewController {
    
    // MARK: - –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤–∫–∏
    private let titleVC = "–ü–æ–∏—Å–∫ üîé"
    
    // MARK: - UI
    
    /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    private let searchController = UISearchController(searchResultsController: nil)
    
    /// —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
    private let tableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.showsVerticalScrollIndicator = false
        tableView.register(SearchCell.self, forCellReuseIdentifier: String(describing: SearchCell.self))
        return tableView
    }()
    
    // MARK: - ViewModels
    var searchResults = [SearchMovie]() {
        didSet {
            DispatchQueue.main.async { [weak self] in
                self?.tableView.reloadData()
            }
        }
    }
  
    // MARK: - Params
    /// –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    var presenter: SearchViewControllerOutput?
    
    private var workItemReference: DispatchWorkItem?
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        setupConstraints()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
    }
}

// MARK: - Setup
private extension SearchViewController {
    func setup() {
        view.backgroundColor = .white
        setupNavigationBar()
        
        // SearchController
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.delegate = self
        navigationItem.searchController = searchController
        definesPresentationContext = true
        
        // tableView
        view.addSubview(tableView)
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    func setupNavigationBar() {
        title = titleVC
        navigationController?.navigationBar.prefersLargeTitles = true
        self.navigationController?.navigationBar.tintColor = UIColor.black
        let filterBarButton = UIBarButtonItem(image: UIImage(named: "settings"), style: .plain, target: self, action: #selector(showFilter))
        
        navigationItem.rightBarButtonItem = filterBarButton
    }
    
    @objc func showFilter() {
        presenter?.presentSettingsScreen(view: self)
    }
}

// MARK: - Setup constraints
private extension SearchViewController {
    func setupConstraints() {
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
}

// MARK: - UITableViewDataSource
extension SearchViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        if searchResults.count == 0 {
            tableView.setEmptyView(title: "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤", message: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤ –ø–æ–∏—Å–∫")
        }
        else {
            tableView.restore()
        }
        
        return searchResults.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: SearchCell.self), for: indexPath) as? SearchCell else { return UITableViewCell() }
        cell.selectionStyle = .none
        
        let searchMovie = searchResults[indexPath.row]
        cell.configure(with: searchMovie)
        
        return cell
    }
}

// MARK: - UITableViewDelegate
extension SearchViewController: UITableViewDelegate {
    
}

// MARK: - UISearchBarDelegate
extension SearchViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        // –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–∂–∏–¥–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        workItemReference?.cancel()

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        let filmsSearchWorkItem = DispatchWorkItem {
            self.presenter?.searchMovie(name: searchText)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ 0.3 —Å–µ–∫—É–Ω–¥—ã
        workItemReference = filmsSearchWorkItem

        DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(300), execute: filmsSearchWorkItem)
    }
}

// MARK: - SearchDisplayLogic
extension SearchViewController: SearchDisplayLogic {
    
}
