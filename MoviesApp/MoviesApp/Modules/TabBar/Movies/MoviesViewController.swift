//
//  MoviesViewController.swift
//  MoviesApp
//
//  Created by Sergey Stelmakh on 09.11.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è MoviesViewController-–∞
protocol MoviesDisplayLogic: AnyObject {
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    /// - Parameters:
    ///   - trends: –¢—Ä–µ–Ω–¥—ã
    ///   - tvPopulars: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã
    ///   - nowPlayings: –°–µ–π—á–∞—Å –≤ –∫–∏–Ω–æ
    func loadDataDone(trends: [Trend], tvPopulars: [TvPopular], nowPlayings: [NowPlaying])
    
    /// –¢—Ä–µ–Ω–¥—ã
    var trends: [Trend] { get set }
    /// –°–µ–π—á–∞—Å –≤ –∫–∏–Ω–æ
    var nowPlaying: [NowPlaying] { get set }
    /// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã
    var tvPopulars: [TvPopular] { get set }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å —è—á–µ–π–∫–∏
    func reloadRows()
    /// –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã
    func reloadTrends()
    /// –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å –≤ –∫–∏–Ω–æ
    func reloadNowPlaying()
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã
    func reloadTvPopular()
}

/// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤
final class MoviesViewController: UIViewController {
    
    // MARK: - –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤–∫–∏
    private let titleVC = "–ö–∏–Ω–æ—Å–º–æ—Ç—Ä üçø"
    
    // MARK: - ViewModels
    var trends = [Trend]() 
    var tvPopulars = [TvPopular]()
    var nowPlaying = [NowPlaying]()
    
    // MARK: - UI
    
    /// —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
    private let tableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
        tableView.register(TrendsCell.self, forCellReuseIdentifier: String(describing: TrendsCell.self))
        tableView.register(NowPlayingCell.self, forCellReuseIdentifier: String(describing: NowPlayingCell.self))
        tableView.register(TvPopularCell.self, forCellReuseIdentifier: String(describing: TvPopularCell.self))
        return tableView
    }()
    
    // MARK: - Params
    
    /// –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    var presenter: MoviesViewControllerOutput?
    
    private var service: NetworkServiceProtocol = APIRequest.shared
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        setupConstrains()
        presenter?.loadData()
    }
}

// MARK: Setup
private extension MoviesViewController {
    func setup() {
        view.backgroundColor = .white
        title = titleVC
        navigationController?.navigationBar.prefersLargeTitles = true
        view.addSubview(tableView)
        
        tableView.delegate = self
        tableView.dataSource = self
    }
}

// MARK: Setup - Constrains
private extension MoviesViewController {
    func setupConstrains() {
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
}

// MARK: - UITableViewDataSource
extension MoviesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 3
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.row {
        case 0:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: TrendsCell.self), for: indexPath) as? TrendsCell else { fatalError() }
            cell.trends = self.trends
            cell.loadMoreDelegate = self
            return cell
        case 1:
            guard let cell = tableView.dequeueReusableCell(
                withIdentifier: String(describing: NowPlayingCell.self), for: indexPath
            ) as? NowPlayingCell else { fatalError() }
            cell.nowPlaying = self.nowPlaying
            cell.loadMoreDelegate = self
            return cell
        case 2:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: TvPopularCell.self), for: indexPath) as? TvPopularCell else { fatalError() }
            cell.tvPopulars = self.tvPopulars
            cell.loadMoreDelegate = self
            return cell
        default:
            fatalError()
        }
    }
}

// MARK: - UITableViewDelegate
extension MoviesViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.row {
            // –Ø—á–µ–π–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        case 0:
            return 280
            // —Å–µ–π—á–∞—Å –≤ –∫–∏–Ω–æ
        case 1:
            return 200
            // –ø–æ–ø—É–ª—è—Ä–Ω–æ –Ω–∞ —Ç–≤
        case 2:
            return 180
        default:
            fatalError()
        }
    }
}

// MARK: - MoviesDisplayLogic
extension MoviesViewController: MoviesDisplayLogic {
    func loadDataDone(trends: [Trend], tvPopulars: [TvPopular], nowPlayings: [NowPlaying]) {
        self.trends = trends
        self.tvPopulars = tvPopulars
        self.nowPlaying = nowPlayings
    }
    
    func reloadRows() {
        let trendsIndexPath = IndexPath(row: 0, section: 0)
        let nowPlayingPath = IndexPath(row: 1, section: 0)
        let tvPopularIndexPath = IndexPath(row: 2, section: 0)
        
        tableView.reloadRows(at: [trendsIndexPath], with: .left)
        tableView.reloadRows(at: [nowPlayingPath], with: .right)
        tableView.reloadRows(at: [tvPopularIndexPath], with: .left)
    }
    
    func reloadTrends() {
        let trendsIndexPath = IndexPath(row: 0, section: 0)
        guard let trendsCell = tableView.cellForRow(at: trendsIndexPath) as? TrendsCell else { return }
        trendsCell.trends = self.trends
    }
    
    func reloadNowPlaying() {
        let nowPlayingIndexPath = IndexPath(row: 1, section: 0)
        guard let nowPlayingCell = tableView.cellForRow(at: nowPlayingIndexPath) as? NowPlayingCell else { return }
        nowPlayingCell.nowPlaying = self.nowPlaying
    }
    
    func reloadTvPopular() {
        let tvPopularIndexPath = IndexPath(row: 2, section: 0)
        guard let tvPopularCell = tableView.cellForRow(at: tvPopularIndexPath) as? TvPopularCell else { return }
        tvPopularCell.tvPopulars = self.tvPopulars
    }
}

// MARK: - LoadMoreDelegate
extension MoviesViewController: LoadMoreDelegate {
    func loadMore(cellType: CellType) {
        switch cellType {
        case .trend:
            presenter?.loadMoreTrends()
        case .nowPlaying:
            presenter?.loadMoreNowPlaying()
        case .tvPopular:
            presenter?.loadMoreTvPopular()
        }
    }
}

